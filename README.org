* streakpy
A Python package for processing and analyzing TREX Streak camera data. 

Main functionality lies in =processing.py=. It works with a command line interface and an input configuration deck.

** Usage
#+BEGIN_SRC
usage: python processing.py [-h] [-V] [-v] [-c] [-a] [-s] [-d] input

positional arguments:
  input                 filepath to .ini file for configuration of inputs

options:
  -h, --help            show this help message and exit
  -V, --version         show program's version number and exit
  -v, --verbosee        print all output
  -c, --calculate_edges run calculate_edges
  -a, --align_edges     run align_edges
  -s, --sum_streaks     run sum_streaks
  -d, --dewarp_streaks  run dewarp_streaks
#+END_SRC

Other files are helper classes for storing and handling the data. =example.ini= is a template for an input configuration file to run processing.py with.

** To do
- TODO implement choice for different background removal algorithms (rolling ball/average of the dataset)
- TODO implement alternative alignment algorithm which straigtens images first then aligns them
- TODO update documentation on dewarping 
- TODO improve efficiency of calculate_edges by minimizing multiple passes over the same image and possibly introducing threading to process multiple images at once?

** Explanation of functions
*** calculate_edges
This algorithm performs edge detection on images in the =full= directory to calculate the bottom edge of each streak in the dataset. First, each image is cropped, has its background gradient removed, and this is saved to the =crop= directory. Then a heavy median filter is applied, followed by a convolution with a horizontal Sobel operator. The resulting image is thresholded based on edge intensity and size, leaving only the most prominent and longest edges. The bottom edge is defined as the bottom-most index of a thresholded edge in each column. This edge goes through filtering to get rid of outliers and is then saved to the =edges= directory.
**** Outputs
- =edges/*.csv=
*** align_edges
This algorithm aligns the calculated edges such as to minimize error from the mean edge. First all edges are roughly vertically aligned based on the polynomial fit at a given horizontal position. Then the mean edge is calculated. Then each edge is receives a vertical micro-shift such as to minimize the weighted error between itself and the mean edge. The error weigthts prioritize error minimization at the bright spots of the images, and are defined by a 1 or 2-Gaussian distribution.
**** Outputs
- =misc/avg_edge.npy=
- =misc/shifts.npy=
- =misc/shifts.csv=
- =misc/edgealignment.png= (if =edge.aligning.save_fig= is =True=)
- =misc/onsettimeerror.png= (if =edge.aligning.save_fig= is =True=)
*** sum_streaks
This algorithm sums the aligned streaks. Streaks that are too close to the top or bottom of the image are ignored. Before summing, a light median filter is applied to each streak. After summing, the collective line of maximum intensity is saved.
**** Outputs
- =misc/streaks.npy=
- =misc/summed.npy=
- =misc/summed.png= (if =streak.summing.save_fig= is =True=)
- =misc/max_intensity.npy=
- =misc/max_intensity_width.npy=
*** dewarp_streaks
This algorithm dewarps/straightens streaks according to a provided warp curve located at =warp=. The warp curve axes units should be in pixels and should already be aligned with the image. A strip of constant height is isolated along the curve (plus a constant offset) and saved to a new array as the straightened streak.
**** Outputs
- =misc/streaks_straightened.npy=
- =dewarped/=

** Explanation of config file parameters
*** [paths]
A collection of paths needed to run =processing.py=. Only =full= is required to exist beforehand. =edge=, =crop=, and =misc= will be created if they do not already exist.
- =dir=: [path, optional] Main directory to store all data in. Not used in any code, purely for ease of specifying =full=, =edge=, =crop=, and =misc=.
- =full=: [path] Directory with full raw data.
- =edge=: [path] Directory where calculated edges are stored.
- =crop=: [path] Directory where cropped and background-removed data are stored.
- =misc=: [path] Directory for all other ouputs.
- =warp=: [path] 2 column .npy or .csv file giving x and y coordinates of warp curve along which to dewarp streaks. Only needed if running =dewarp_streaks=.
- =dewarp=: [path] Directory where dewarped streaks are stored. Only needed if running =dewarp_streaks=.

*** [edge.finding]
- =high_percentile_thresh=: [int or float] When thresholding by edge intensity, all points above this percentile will be considered edges.
- =low_percentile_thresh=: [int or float] When thresholding by edge intensity, all points below this percentile will edge not be considered edges.
- =size_thresh=: [int or float] When thresholding by edge size, all edges less than this size will not be ignored.
- =medfilt_kernel_size=: [int or tuple] The kernel for a median filter applied to the image before edge finding. It is recommended that this be between 9 and 15.
- =degree=: [int] The degree of the polynomial that the edge will be fit to.
- =fine_pruning_radius=: [int] For each point along the edge, the median edge y position is calculated for points in a window with radius =fine_pruning_radius= to the left and right. This point will be considered an outlier and will be pruned if it further from the median in value than the treshold.
- =fine_pruning_thresh=: [int] The pruning threshold for outliers within an moving window along the edge.
- =simple_xmin=: [int] Points further left than this threshold will be pruned from the edge.
- =simple_xmax=: [int] Points further right than this threshold will be pruned from the edge.

*** [edge.aligning]
- =align_x=: [int] All streaks within a dataset will first be roughtly aligned based on the polynomial fit to the edge at this x position.
- =align_y=: [int] Individual image shifts for vertical alignment are calculated in relation to this y value. 
- =simple_ythresh=: [int] Points along an edge pre-alignment will be pruned if they are further from the vertical median value than this threshold.
- =simple_xthresh=: [int] Points along an edge pre-alignment will be pruned if they are further from the horizontal median value than this threshold.
- =show_fig=: [bool] Whether to show the figures of the edge alignment and error.
- =save_fig=: [bool] Whether to save the figures of the edge alignment and error.

*** [edge.aligning.weightparameters]
- =mu1=: [float] center of Gaussian weighting w line edge
- =sigma1=: [float] spread of Gaussian weighting w line edge
- =mu2=: [float, optional] center of Gaussian weighting a line edge
- =sigma2=: [float, optional] spread of Gaussian weighting a line edge
- =amp2=: [float, optional] relative amplitude of Gaussian weighting a line edge

*** [background.processing]
- =average_window_radius=: [int] When removing the background, each column will be subtracted the average value of a =100 x 2*average_window_radius= section from the top of the image, centered at that column. A larger value will follow larger scale structures in the background.
- =crop_bounds=: [tuple] Pixel bounds to that full images will be cropped to before saving to =crop= path. Of the form (=xmin=, =ymin=, =xmax=, =ymax=).
- =medfilt_kernel_size=: [int or tuple] Kernel for median filter applied to the image.

*** [streak.summing]
- =num=: [int, optional] The number of files to sum from =crop= directory. Useful if you don't want to run the entire directory.
- =streak_height=: [int] The pixel height of the frame around the streaks.
- =balance=: [float, optional] The panning balance of the aligned streaks with relation to =align_y=. Should be between 0 and 1, and if not specified, will default to 0.5. A higher value means the streak will sit relatively higher in the frame (there is more padding at the bottom).
- =show_fig=: [bool] Whether to show the figure of all streaks summed.
- =save_fig=: [bool] Whether to save the figure of all streaks summed.

*** [streak.dewarping]
- =strip_height=: [int] The pixel height of the dewarped streaks.
- =y_offset=: [int] The vertical offset of the dewarped streaks with relation to the warp curve. It is recommended that this value be positive because the warp curve will roughly go through the center of the streaks.

*** [axes.conversion]
- =px_to_ps=: [float, optional] Conversion factor for vertical axis to time.
- =px_to_eV=: [float, optional] Conversion factor for horizontal axis to energy.